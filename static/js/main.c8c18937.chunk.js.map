{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","utils/fetchClient.ts","components/UserSelector.tsx","api/service.ts","App.tsx","index.tsx"],"names":["PostsList","posts","selectedPost","setSelectedPost","onSelectPost","setIsDisplayedForm","className","map","post","id","title","type","cn","onClick","handleClick","Loader","NewCommentForm","onAddComment","isAddingComment","useState","name","email","body","formState","setFormState","nameError","emailError","bodyError","formError","setFormError","onSubmit","event","preventDefault","prevState","htmlFor","placeholder","value","onChange","target","PostDetails","comments","isCommentsError","isLoadingComments","onDeleteComment","isDisplayedForm","length","comment","href","commentId","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","JSON","stringify","headers","then","fetch","response","json","client","UserSelector","onSelectUser","selectedUser","setSelectedUser","users","setUsers","isOpenMenu","setIsOpenMenu","useEffect","usersFromServer","catch","Error","onBlur","role","user","onMouseDown","App","userPosts","setUserPosts","postComments","setPostComments","isLoadingPosts","setIsLoadingPosts","setIsLoadingComments","setIsAddingComment","isPostsError","setIsPostsError","setIsCommentsError","userId","service","finally","postId","prevComments","filter","commentData","newComment","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c8c18937.chunk.js","sourcesContent":["import React from 'react';\nimport cn from 'classnames';\n\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[] | null;\n  selectedPost: Post | null;\n  setSelectedPost: React.Dispatch<React.SetStateAction<Post | null>>;\n  onSelectPost: (postId: number) => void;\n  setIsDisplayedForm: React.Dispatch<React.SetStateAction<boolean>>;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPost,\n  setSelectedPost,\n  onSelectPost,\n  setIsDisplayedForm,\n}) => {\n  const handleClick = (post: Post) => {\n    setIsDisplayedForm(false);\n    setSelectedPost(selectedPost?.id === post.id ? null : post);\n    onSelectPost(post.id);\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts?.map(post => (\n            <tr data-cy=\"Post\" key={post.id}>\n              <td data-cy=\"PostId\">\n                {post.id}\n              </td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={cn('button is-link', {\n                    'is-light': selectedPost?.id !== post.id,\n                  })}\n                  onClick={() => handleClick(post)}\n                >\n                  {selectedPost?.id === post.id ? 'Close' : 'Open'}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState } from 'react';\nimport cn from 'classnames';\n\nimport { CommentData } from '../types/Comment';\n\ntype Props = {\n  onAddComment: (commentData: CommentData) => void;\n  isAddingComment: boolean;\n};\n\ninterface FormState {\n  name: string,\n  email: string,\n  body: string,\n}\n\ninterface FormError {\n  nameError: boolean,\n  emailError: boolean,\n  bodyError: boolean,\n}\n\nexport const NewCommentForm: React.FC<Props> = ({\n  onAddComment,\n  isAddingComment,\n}) => {\n  const [formState, setFormState] = useState<FormState>({\n    name: '',\n    email: '',\n    body: '',\n  });\n  const [formError, setFormError] = useState<FormError>({\n    nameError: false,\n    emailError: false,\n    bodyError: false,\n  });\n\n  const handleNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setFormState(prevState => ({ ...prevState, name: event.target.value }));\n    setFormError(prevState => ({ ...prevState, nameError: false }));\n  };\n\n  const handleEmailChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setFormState(prevState => ({ ...prevState, email: event.target.value }));\n    setFormError(prevState => ({ ...prevState, emailError: false }));\n  };\n\n  const handleBodyChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setFormState(prevState => ({ ...prevState, body: event.target.value }));\n    setFormError(prevState => ({ ...prevState, bodyError: false }));\n  };\n\n  const handleReset = () => {\n    setFormState({ name: '', email: '', body: '' });\n    setFormError({ nameError: false, emailError: false, bodyError: false });\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const { name, email, body } = formState;\n\n    setFormError({\n      nameError: !name,\n      emailError: !email,\n      bodyError: !body,\n    });\n\n    if (!name || !email || !body) {\n      return;\n    }\n\n    onAddComment({ name, email, body });\n    setFormState(prevState => ({ ...prevState, body: '' }));\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={handleSubmit}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={cn('input', {\n              'is-danger': formError.nameError,\n            })}\n            value={formState.name}\n            onChange={handleNameChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          <span\n            className={cn('icon is-small is-right has-text-danger', {\n              'is-hidden': !formError.nameError,\n            })}\n            data-cy=\"ErrorIcon\"\n          >\n            <i className=\"fas fa-exclamation-triangle\" />\n          </span>\n        </div>\n\n        <p\n          className={cn('help is-danger', {\n            'is-hidden': !formError.nameError,\n          })}\n          data-cy=\"ErrorMessage\"\n        >\n          Name is required\n        </p>\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={cn('input', {\n              'is-danger': formError.emailError,\n            })}\n            value={formState.email}\n            onChange={handleEmailChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          <span\n            className={cn('icon is-small is-right has-text-danger', {\n              'is-hidden': !formError.emailError,\n            })}\n            data-cy=\"ErrorIcon\"\n          >\n            <i className=\"fas fa-exclamation-triangle\" />\n          </span>\n        </div>\n\n        <p\n          className={cn('help is-danger', {\n            'is-hidden': !formError.emailError,\n          })}\n          data-cy=\"ErrorMessage\"\n        >\n          Email is required\n        </p>\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={cn('textarea', {\n              'is-danger': formError.bodyError,\n            })}\n            value={formState.body}\n            onChange={handleBodyChange}\n          />\n        </div>\n\n        <p\n          className={cn('help is-danger', {\n            'is-hidden': !formError.bodyError,\n          })}\n          data-cy=\"ErrorMessage\"\n        >\n          Enter some text\n        </p>\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={cn('button is-link', {\n              'is-loading': isAddingComment,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleReset}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Comment, CommentData } from '../types/Comment';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  comments: Comment[] | null;\n  post: Post | null;\n  isCommentsError: boolean;\n  isLoadingComments: boolean;\n  onDeleteComment: (commentId: number) => void;\n  onAddComment: (commentData: CommentData) => void;\n  isAddingComment: boolean;\n  isDisplayedForm: boolean;\n  setIsDisplayedForm: React.Dispatch<React.SetStateAction<boolean>>;\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  comments,\n  post,\n  isCommentsError,\n  isLoadingComments,\n  onDeleteComment,\n  onAddComment,\n  isAddingComment,\n  isDisplayedForm,\n  setIsDisplayedForm,\n}) => {\n  const handleDeleteComment = (commentId: number) => {\n    onDeleteComment(commentId);\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${post?.id}: ${post?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoadingComments && (\n            <Loader />\n          )}\n\n          {isCommentsError && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {(!comments?.length && !isLoadingComments && !isCommentsError) && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n          {!!comments?.length && (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n\n              {comments?.map(comment => (\n                <article className=\"message is-small\" data-cy=\"Comment\">\n                  <div className=\"message-header\">\n                    <a\n                      href={`mailto:${comment.email}`}\n                      data-cy=\"CommentAuthor\"\n                    >\n                      {comment.name}\n                    </a>\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={() => handleDeleteComment(comment.id)}\n                    >\n                      delete button\n                    </button>\n                  </div>\n\n                  <div className=\"message-body\" data-cy=\"CommentBody\">\n                    {comment.body}\n                  </div>\n                </article>\n              ))}\n            </>\n          )}\n\n          {(!isLoadingComments && !isCommentsError && !isDisplayedForm) && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setIsDisplayedForm(true)}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {isDisplayedForm && (\n          <NewCommentForm\n            onAddComment={onAddComment}\n            isAddingComment={isAddingComment}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useEffect, useState } from 'react';\nimport cn from 'classnames';\n\nimport * as service from '../api/service';\n\nimport { User } from '../types/User';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  onSelectUser: (userId: number) => void;\n  selectedUser: User | null;\n  setSelectedUser: React.Dispatch<React.SetStateAction<User | null>>;\n  setSelectedPost: React.Dispatch<React.SetStateAction<Post | null>>;\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  onSelectUser,\n  selectedUser,\n  setSelectedUser,\n  setSelectedPost,\n}) => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [isOpenMenu, setIsOpenMenu] = useState(false);\n\n  useEffect(() => {\n    service.getUsers()\n      .then(usersFromServer => setUsers(usersFromServer))\n      .catch(() => new Error());\n  }, []);\n\n  const handleClick = (user: User) => {\n    setSelectedUser(user);\n\n    if (selectedUser?.id !== user.id) {\n      setSelectedPost(null);\n      onSelectUser(user.id);\n    }\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={cn('dropdown', {\n        'is-active': isOpenMenu,\n      })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsOpenMenu(!isOpenMenu)}\n          onBlur={() => setIsOpenMenu(false)}\n        >\n          <span>{selectedUser?.name || 'Choose a user'}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              className={cn('dropdown-item', {\n                'is-active': selectedUser?.id === user.id,\n              })}\n              onMouseDown={() => handleClick(user)}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { client } from '../utils/fetchClient';\n\nimport { Post } from '../types/Post';\nimport { User } from '../types/User';\nimport { Comment } from '../types/Comment';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n\nexport const getUserPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n\nexport const getPostComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n\nexport const addComment = (newComment: Omit<Comment, 'id'>) => {\n  return client.post<Comment>('/comments', newComment);\n};\n","import React, { useState } from 'react';\nimport cn from 'classnames';\n\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\n\nimport * as service from './api/service';\n\nimport { Post } from './types/Post';\nimport { Comment, CommentData } from './types/Comment';\nimport { User } from './types/User';\n\nexport const App: React.FC = () => {\n  const [userPosts, setUserPosts] = useState<Post[] | null>(null);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [postComments, setPostComments] = useState<Comment[] | null>(null);\n  const [isLoadingPosts, setIsLoadingPosts] = useState(false);\n  const [isLoadingComments, setIsLoadingComments] = useState(false);\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const [isPostsError, setIsPostsError] = useState(false);\n  const [isCommentsError, setIsCommentsError] = useState(false);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [isDisplayedForm, setIsDisplayedForm] = useState(false);\n\n  const loadUserPosts = (userId: number) => {\n    setUserPosts(null);\n    setIsLoadingPosts(true);\n    setIsPostsError(false);\n    service.getUserPosts(userId)\n      .then(posts => setUserPosts(posts))\n      .catch(() => setIsPostsError(true))\n      .finally(() => setIsLoadingPosts(false));\n  };\n\n  const loadPostComments = (postId: number) => {\n    setPostComments(null);\n    setIsCommentsError(false);\n    setIsLoadingComments(true);\n    service.getPostComments(postId)\n      .then(comments => setPostComments(comments))\n      .catch(() => setIsCommentsError(true))\n      .finally(() => setIsLoadingComments(false));\n  };\n\n  const deleteComment = (commentId: number) => {\n    service.deleteComment(commentId)\n      .catch(() => new Error());\n    setPostComments(prevComments => (\n      prevComments?.filter(comment => comment.id !== commentId) || null\n    ));\n  };\n\n  const addComment = (commentData: CommentData) => {\n    const { name, email, body } = commentData;\n\n    if (!selectedPost?.id) {\n      return;\n    }\n\n    const newComment = {\n      postId: selectedPost?.id,\n      name,\n      email,\n      body,\n    };\n\n    setIsAddingComment(true);\n    service.addComment(newComment)\n      .then(response => (\n        setPostComments(prevComments => (\n          prevComments ? [...prevComments, response] : null\n        ))\n      ))\n      .catch(() => setIsCommentsError(true))\n      .finally(() => setIsAddingComment(false));\n  };\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  onSelectUser={loadUserPosts}\n                  selectedUser={selectedUser}\n                  setSelectedUser={setSelectedUser}\n                  setSelectedPost={setSelectedPost}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoadingPosts && (\n                  <Loader />\n                )}\n\n                {isPostsError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {(!userPosts?.length && userPosts) && (\n                  <div\n                    className=\"notification is-warning\"\n                    data-cy=\"NoPostsYet\"\n                  >\n                    No posts yet\n                  </div>\n                )}\n\n                {!!userPosts?.length && (\n                  <PostsList\n                    posts={userPosts}\n                    selectedPost={selectedPost}\n                    setSelectedPost={setSelectedPost}\n                    onSelectPost={loadPostComments}\n                    setIsDisplayedForm={setIsDisplayedForm}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={cn(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar', {\n                'Sidebar--open': selectedPost,\n              },\n            )}\n          >\n            {selectedPost && (\n              <div className=\"tile is-child box is-success\">\n                <PostDetails\n                  comments={postComments}\n                  post={selectedPost}\n                  isCommentsError={isCommentsError}\n                  isLoadingComments={isLoadingComments}\n                  onDeleteComment={deleteComment}\n                  onAddComment={addComment}\n                  isAddingComment={isAddingComment}\n                  isDisplayedForm={isDisplayedForm}\n                  setIsDisplayedForm={setIsDisplayedForm}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}